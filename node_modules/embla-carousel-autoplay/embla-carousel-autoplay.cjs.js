'use strict';

const defaultOptions = {
  active: true,
  breakpoints: {},
  delay: 4000,
  jump: false,
  playOnInit: true,
  stopOnInteraction: true,
  stopOnMouseEnter: false,
  stopOnLastSnap: false,
  rootNode: null
};

function Autoplay(userOptions = {}) {
  let options;
  let emblaApi;
  let interaction;
  let timer = 0;
  let jump = false;
  function init(emblaApiInstance, optionsHandler) {
    emblaApi = emblaApiInstance;
    const {
      mergeOptions,
      optionsAtMedia
    } = optionsHandler;
    const optionsBase = mergeOptions(defaultOptions, Autoplay.globalOptions);
    const allOptions = mergeOptions(optionsBase, userOptions);
    options = optionsAtMedia(allOptions);
    jump = options.jump;
    interaction = options.stopOnInteraction ? destroy : stop;
    const {
      eventStore,
      ownerDocument,
      ownerWindow
    } = emblaApi.internalEngine();
    const emblaRoot = emblaApi.rootNode();
    const root = options.rootNode && options.rootNode(emblaRoot) || emblaRoot;
    emblaApi.on('pointerDown', interaction);
    if (!options.stopOnInteraction) emblaApi.on('pointerUp', reset);
    if (options.stopOnMouseEnter) {
      eventStore.add(root, 'mouseenter', interaction);
      if (!options.stopOnInteraction) eventStore.add(root, 'mouseleave', reset);
    }
    eventStore.add(ownerDocument, 'visibilitychange', () => {
      if (ownerDocument.visibilityState === 'hidden') return stop();
      reset();
    });
    eventStore.add(ownerWindow, 'pagehide', event => {
      if (event.persisted) stop();
    });
    if (options.playOnInit) play();
  }
  function destroy() {
    emblaApi.off('pointerDown', interaction);
    if (!options.stopOnInteraction) emblaApi.off('pointerUp', reset);
    stop();
    timer = 0;
  }
  function play(jumpOverride) {
    stop();
    if (typeof jumpOverride !== 'undefined') jump = jumpOverride;
    timer = window.setTimeout(next, options.delay);
  }
  function stop() {
    if (!timer) return;
    window.clearTimeout(timer);
  }
  function reset() {
    if (!timer) return;
    stop();
    play();
  }
  function next() {
    const {
      index
    } = emblaApi.internalEngine();
    const lastIndex = emblaApi.scrollSnapList().length - 1;
    const kill = options.stopOnLastSnap && index.get() === lastIndex;
    if (kill) return destroy();
    if (emblaApi.canScrollNext()) {
      emblaApi.scrollNext(jump);
    } else {
      emblaApi.scrollTo(0, jump);
    }
    play();
  }
  const self = {
    name: 'autoplay',
    options: userOptions,
    init,
    destroy,
    play,
    stop,
    reset
  };
  return self;
}
Autoplay.globalOptions = undefined;

module.exports = Autoplay;
//# sourceMappingURL=embla-carousel-autoplay.cjs.js.map
